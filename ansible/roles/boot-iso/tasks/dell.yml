---
# Dell tasks for booting an iso

- name: Set Virtual Media ISO
  set_fact:
    _virtual_media_iso: "{{ virtual_media_iso | default(hostvars[item]['boot_iso']) }}"

- name: Dell - Power down machine prior to booting iso
  shell: |
    ipmitool -I lanplus -H {{ hostvars[item]['bmc_address'] }} -U {{ hostvars[item]['bmc_user'] }} -P {{ hostvars[item]['bmc_password'] }} chassis power off
  ignore_errors: true
  register: ipmi_poweroff

- name: Dell - Pause for power down
  pause:
    seconds: 10
  when: not ipmi_poweroff.failed

- name: Dell - Set OneTimeBoot VirtualCD
  uri:
    url: "https://{{ hostvars[item]['bmc_address'] }}/redfish/v1/Managers/iDRAC.Embedded.1/Actions/Oem/EID_674_Manager.ImportSystemConfiguration"
    user: "{{ hostvars[item]['bmc_user'] }}"
    password: "{{ hostvars[item]['bmc_password'] }}"
    method: POST
    headers:
      content-type: application/json
      Accept: application/json
    body:
      {
        "ShareParameters": { "Target": ["ALL"] },
        "ImportBuffer": '<SystemConfiguration><Component FQDD="iDRAC.Embedded.1"><Attribute Name="ServerBoot.1#BootOnce">Enabled</Attribute><Attribute Name="ServerBoot.1#FirstBootDevice">VNF-2</Attribute></Component></SystemConfiguration>',
      }
    body_format: json
    validate_certs: no
    status_code: 202
    return_content: yes

- name: Dell - Check for Virtual Media
  uri:
    url: "https://{{ hostvars[item]['bmc_address'] }}/redfish/v1/Systems/System.Embedded.1/VirtualMedia/2"
    user: "{{ hostvars[item]['bmc_user'] }}"
    password: "{{ hostvars[item]['bmc_password'] }}"
    method: Get
    headers:
      content-type: application/json
      Accept: application/json
    body: {}
    body_format: json
    validate_certs: no
    status_code: 200
    return_content: yes
  register: check_virtual_media

- name: Dell - Eject any CD Virtual Media
  uri:
    url: "https://{{ hostvars[item]['bmc_address'] }}/redfish/v1/Systems/System.Embedded.1/VirtualMedia/2/Actions/VirtualMedia.EjectMedia"
    user: "{{ hostvars[item]['bmc_user'] }}"
    password: "{{ hostvars[item]['bmc_password'] }}"
    method: POST
    headers:
      content-type: application/json
      Accept: application/json
    body: {}
    body_format: json
    validate_certs: no
    status_code: 204
    return_content: yes
  when: check_virtual_media.json.Image

# # Eject just the found image
# - name: DELL - Eject Virtual Media
#   community.general.redfish_command:
#     category: Manager
#     command: VirtualMediaEject
#     baseuri: "{{ hostvars[item]['bmc_address'] }}"
#     username: "{{ hostvars[item]['bmc_user'] }}"
#     password: "{{ hostvars[item]['bmc_password'] }}"
#     virtual_media:
#       image_url: "{{ check_virtual_media.json.Image  }}"
#     resource_id: iDRAC.Embedded.1
#   ignore_errors: yes

- name: DELL - Insert Virtual Media (using ansible.builtin.uri)
  ansible.builtin.uri:
    url: "https://{{ hostvars[item]['bmc_address'] }}/redfish/v1/Systems/System.Embedded.1/VirtualMedia/2/Actions/VirtualMedia.InsertMedia"
    method: POST
    user: "{{ hostvars[item]['bmc_user'] }}"
    password: "{{ hostvars[item]['bmc_password'] }}"
    force_basic_auth: true
    validate_certs: false
    headers:
      Content-Type: "application/json"
    body_format: json
    body:
      Image: "http://{{ http_store_host }}:{{ http_store_port }}/{{ _virtual_media_iso }}"
      Inserted: true
      WriteProtected: true
    status_code: [200, 204]
  register: result
  until: result.status != -1
  retries: 5
  delay: 30

- name: DELL - Power ON
  community.general.redfish_command:
    category: Systems
    command: PowerOn
    baseuri: "{{ hostvars[item]['bmc_address'] }}"
    username: "{{ hostvars[item]['bmc_user'] }}"
    password: "{{ hostvars[item]['bmc_password'] }}"
  register: result
  until: not result.failed
  retries: 5
  delay: 30
